version: 2.1

orbs:
  slack: circleci/slack@4.10.1
  aws-cli: circleci/aws-cli@3.1.3


commands:
  install-aws-cli:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Destroy environments
          when: on_fail 
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Destroy environments
          when: on_fail 
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}

jobs:

########################################################################## CI
  build-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end Build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  build-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front-end Build
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
 
  test-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end Test
          command: |
            cd backend
            npm install
            npm run test
            
  test-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front-end Test
          command: |
            cd frontend
            npm install
            npm run test
               
  scan-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end Vulnerability Scan
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - slack/notify:
          event: fail
          mentions: '@aobri'
          template: basic_fail_1
            
  scan-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front-end Vulnerability Scan
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
      - slack/notify:
          event: fail
          mentions: '@aobri'
          template: basic_fail_1


########################################################################## CD
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli:latest
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
                --template-file .circleci/files/backend.yml \
                --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
                --tags project=udapeople
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
                --template-file .circleci/files/frontend.yml \
                --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
                --tags project=udapeople
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            echo "[backend-servers]" > .circleci/ansible/inventory.txt
            aws ec2 describe-instances \
               --query 'Reservations[*].Instances[*].PublicIpAddress' \
               --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
               --output text >> .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: .
          paths:
            - .circleci/ansible/inventory.txt
      - destroy-environment

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["cc:76:25:c1:4e:2d:e7:13:d3:94:8b:71:26:0a:ee:7c"]
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible
      - aws-cli/install
      - aws-cli/setup
      - attach_workspace:
          at: .
      - run:
          name: Configure backend server
          command: |
            ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml
      - destroy-environment   

    
workflows:
  default:
    jobs:
      # - build-backend
      # - build-frontend
      # - test-backend:
      #     requires: [build-backend]
      # - test-frontend:
      #     requires: [build-frontend]
      # - scan-backend:
      #     context: Slack
      #     requires: [build-backend]
      # - scan-frontend:
      #     context: Slack
      #     requires: [build-frontend]
      - deploy-infrastructure
          # requires: [scan-frontend, scan-backend]
          # filters:
          #   branches:
          #     only:
          #       - master
      - configure-infrastructure:
          requires: [deploy-infrastructure]